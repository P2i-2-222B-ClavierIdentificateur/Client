package Encryption;

import java.io.UnsupportedEncodingException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import javax.crypto.*;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class Encryption {
	
	public String encrypteAsHex(String plane){
		 byte[] encrypted = null;
		try{
			
	        KeyGenerator keygen = KeyGenerator.getInstance("AES");
	        keygen.init(128);  // To use 256 bit keys, you need the "unlimited strength" encryption policy files from Sun.
	        byte[] key = keygen.generateKey().getEncoded();
	        SecretKeySpec skeySpec = new SecretKeySpec(key, "AES");
	
	     // build the initialization vector (randomly).
	        SecureRandom random = new SecureRandom();
	        byte iv[] = new byte[16];//generate random 16 byte IV AES is always 16bytes
	        random.nextBytes(iv);
	        IvParameterSpec ivspec = new IvParameterSpec(iv);
	
	     // initialize the cipher for encrypt mode
	        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
	        cipher.init(Cipher.ENCRYPT_MODE, skeySpec, ivspec);
	        
	        // encrypt the message
	        byte[] encrypted = cipher.doFinal(plane.getBytes());
	        return (asHex(encrypted));
		}catch (Exception e){
			e.printStackTrace();
		}
        return (asHex(encrypted));

	}
	
	
	 /**
     * Turns array of bytes into string
     *
     * @param buf   Array of bytes to convert to hex string
     * @return  Generated hex string
     */
    public static String asHex(byte buf[]) {
        StringBuilder strbuf = new StringBuilder(buf.length * 2);
        int i;
        for (i = 0; i < buf.length; i++) {
            if (((int) buf[i] & 0xff) < 0x10) {
                strbuf.append("0");
            }
            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));
        }
        return strbuf.toString();
    }
}
